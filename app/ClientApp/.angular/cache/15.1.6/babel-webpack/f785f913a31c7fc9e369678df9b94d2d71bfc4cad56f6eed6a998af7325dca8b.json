{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nlet PostListingComponent = class PostListingComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  ngOnInit() {\n    this.initializeFormControls();\n  }\n  initializeFormControls() {\n    this.priceType = new FormGroup({\n      isDap: new FormControl(false)\n    });\n    this.dealerType = new FormGroup({\n      isDealer: new FormControl(false)\n    });\n    this.nonDealerDetailsForm = new FormGroup({\n      name: new FormControl(),\n      contactNumber: new FormControl()\n    });\n    this.dealerDetailsForm = new FormGroup({\n      name: new FormControl(),\n      contactNumber: new FormControl(),\n      email: new FormControl(),\n      abn: new FormControl()\n    });\n    this.createForm = new FormGroup({\n      year: new FormControl(),\n      make: new FormControl(),\n      model: new FormControl(),\n      comments: new FormControl(),\n      driveAwayPrice: new FormControl(0),\n      excludingGovernmentCharges: new FormControl(),\n      nonDealerDetails: this.nonDealerDetailsForm,\n      dealerDetails: this.dealerDetailsForm\n    });\n  }\n  updateListing() {\n    if (this.createForm.valid) {\n      const newListing = {\n        year: this.createForm.get('year').value,\n        make: this.createForm.get('make').value,\n        model: this.createForm.get('model').value,\n        comments: this.createForm.get('comments').value,\n        driveAwayPrice: this.createForm.get('driveAwayPrice').value ?? 0,\n        excludingGovernmentCharges: this.createForm.get('excludingGovernmentCharges').value ?? 0,\n        nonDealerDetails: {\n          name: this.nonDealerDetailsForm.get('name').value,\n          contactNumber: this.nonDealerDetailsForm.get('contactNumber').value\n        },\n        dealerDetails: {\n          name: this.dealerDetailsForm.get('name').value,\n          contactNumber: this.dealerDetailsForm.get('contactNumber').value,\n          email: this.dealerDetailsForm.get('email').value,\n          abn: this.dealerDetailsForm.get('abn').value\n        }\n      };\n      this.http.post(this.baseUrl + 'api/carlisting/create', newListing).subscribe(() => {\n        // Update successful\n        console.log('Listing updated successfully!');\n      }, error => {\n        console.error('Error updating listing:', error);\n        // Handle the error case if needed\n      });\n    }\n  }\n};\n\nPostListingComponent = __decorate([Component({\n  selector: 'app-post-listing',\n  templateUrl: './post-listing.component.html',\n  styleUrls: ['./post-listing.component.css']\n}), __param(1, Inject('BASE_URL'))], PostListingComponent);\nexport { PostListingComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","FormControl","FormGroup","PostListingComponent","constructor","http","baseUrl","ngOnInit","initializeFormControls","priceType","isDap","dealerType","isDealer","nonDealerDetailsForm","name","contactNumber","dealerDetailsForm","email","abn","createForm","year","make","model","comments","driveAwayPrice","excludingGovernmentCharges","nonDealerDetails","dealerDetails","updateListing","valid","newListing","get","value","post","subscribe","console","log","error","selector","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["/home/phetoush/Documents/github_repos/work/OffsureAssessment/ClientApp/src/app/post-listing/post-listing.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-post-listing',\n  templateUrl: './post-listing.component.html',\n  styleUrls: ['./post-listing.component.css']\n})\nexport class PostListingComponent {\n  public createForm: FormGroup;\n  public nonDealerDetailsForm: FormGroup;\n  public dealerDetailsForm: FormGroup;\n  public priceType: FormGroup;\n  public dealerType: FormGroup;\n\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\n  }\n\n  ngOnInit() {\n    this.initializeFormControls();\n  }\n\n  initializeFormControls() {\n    this.priceType = new FormGroup({\n      isDap: new FormControl(false)\n    })\n\n    this.dealerType = new FormGroup({\n      isDealer: new FormControl(false)\n    })\n\n    this.nonDealerDetailsForm = new FormGroup({\n      name: new FormControl(),\n      contactNumber: new FormControl()\n    });\n\n    this.dealerDetailsForm = new FormGroup({\n      name: new FormControl(),\n      contactNumber: new FormControl(),\n      email: new FormControl(),\n      abn: new FormControl()\n    });\n\n    this.createForm = new FormGroup({\n      year: new FormControl(),\n      make: new FormControl(),\n      model: new FormControl(),\n      comments: new FormControl(),\n      driveAwayPrice: new FormControl(0),\n      excludingGovernmentCharges: new FormControl(),\n      nonDealerDetails: this.nonDealerDetailsForm,\n      dealerDetails: this.dealerDetailsForm\n    });\n  }\n\n  updateListing() {\n    if (this.createForm.valid) {\n      const newListing: CarListing = {\n        year: this.createForm.get('year').value,\n        make: this.createForm.get('make').value,\n        model: this.createForm.get('model').value,\n        comments: this.createForm.get('comments').value,\n        driveAwayPrice: this.createForm.get('driveAwayPrice').value ?? 0,\n        excludingGovernmentCharges: this.createForm.get('excludingGovernmentCharges').value ?? 0,\n        nonDealerDetails: {\n          name: this.nonDealerDetailsForm.get('name').value,\n          contactNumber: this.nonDealerDetailsForm.get('contactNumber').value\n        },\n        dealerDetails: {\n          name: this.dealerDetailsForm.get('name').value,\n          contactNumber: this.dealerDetailsForm.get('contactNumber').value,\n          email: this.dealerDetailsForm.get('email').value,\n          abn: this.dealerDetailsForm.get('abn').value\n        },\n      };\n\n      this.http.post(this.baseUrl + 'api/carlisting/create', newListing).subscribe(\n        () => {\n          // Update successful\n          console.log('Listing updated successfully!');\n        },\n        error => {\n          console.error('Error updating listing:', error);\n          // Handle the error case if needed\n        }\n      );\n    }\n  }\n}\n\ninterface CarListing {\n  year?: string;\n  make?: string;\n  model?: string;\n  comments: string;\n  driveAwayPrice?: number;\n  excludingGovernmentCharges?: number;\n  nonDealerDetails?: {\n    name: string;\n    contactNumber: string;\n  }\n  dealerDetails?: {\n    name: string;\n    email: string;\n    contactNumber: string;\n    abn: string;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}